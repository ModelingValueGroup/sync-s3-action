##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## (C) Copyright 2018-2019 Modeling Value Group B.V. (http://modelingvalue.org)                                        ~
##                                                                                                                     ~
## Licensed under the GNU Lesser General Public License v3.0 (the 'License'). You may not use this file except in      ~
## compliance with the License. You may obtain a copy of the License at: https://choosealicense.com/licenses/lgpl-3.0  ~
## Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on ~
## an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  ~
## specific language governing permissions and limitations under the License.                                          ~
##                                                                                                                     ~
## Maintainers:                                                                                                        ~
##     Wim Bast, Tom Brus, Ronald Krijgsheld                                                                           ~
## Contributors:                                                                                                       ~
##     Arjan Kok, Carel Bast                                                                                           ~
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

name: 'sync-s3-action'
description: 'get/put files from/to S3'
author: 'Tom Brus'

inputs:
  # tokens ================================================================
  trigger_token:
    description : 'the github token (used for retriggering other actions)'
    required    : true
  access_key:
    description : 'the AWS or Scaleway ACCESS_KEY (used to access S3)'
    required    : true
  secret_key:
    description : 'the AWS or Scaleway SECRET_KEY (used to access S3)'
    required    : true

  # required ================================================================
  cmd:
    description : 'the direction of the copy: "put" or "get"'
    required    : true
  bucket:
    description : 'the s3 bucket'
    required    : true

  # locations ================================================================
  local_dir:
    description : 'the local dir to copy from/to'
    required    : true
  s3_dir:
    description : 'the s3 remote dir to copy to/from'
    required    : false
  s3_dir_branched:
    description : 'the s3 remote dir to copy to/from, extended with $GITHUB_REPOSITORY and the current branch, also honor trigger files'
    required    : false

  # optional ================================================================
  host:
    description : 'the s3 host (defaults to Scaleway: https://s3.$region.scw.cloud)'
    required    : false
  region:
    description : 'the s3 region'
    required    : false
    default     : "nl-ams"
  trace:
    description : 'set this to "true" if you would like bash-tracing'
    required    : false
    default     : "false"

  # future ================================================================
  _group:
    description : 'the group id of the assets'
    required    : false
  _artifact:
    description : 'the artifact id of the assets'
    required    : false
  _branch:
    description : 'the branch to use'
    required    : false
    default     : '${{github.ref}}'

runs:
  using: 'composite'
  steps:
    - shell: bash
      id: main
      run: |
        set -euo pipefail
        [[ "${{inputs.trace}}" == "true" ]] && set -x

        . "${{github.action_path}}/buildtoolsMeme.sh"
        . "${{github.action_path}}/functions.sh"

        main \
          "${{inputs.access_key}}"      \
          "${{inputs.secret_key}}"      \
          "${{inputs.trigger_token}}"   \
          "${{inputs.cmd}}"             \
          "${{inputs.bucket}}"          \
          "${{inputs.local_dir}}"       \
          "${{inputs.s3_dir}}"          \
          "${{inputs.s3_dir_branched}}" \
          "${{inputs.host}}"            \
          "${{inputs.region}}"

        ###################################################################################################
        ###################################################################################################
        ##### future
        ###################################################################################################
        ###################################################################################################
        echo "::info::running shadow script..."
        set -x
        if [[ "${{inputs.cmd}}" == put ]]; then
          if [[ "${{inputs._group}}" != "" && "${{inputs._artifact}}" != "" && "${{inputs._branch}}" != "" ]]; then
            rm -f "$ARTIFACTS_CLONE/../log"
            storeTmpArtifacts \
              "${{inputs.trigger_token}}"   \
              "${{inputs.local_dir}}"       \
              "${{inputs._group}}"          \
              "${{inputs._artifact}}"       \
              "${{inputs._branch}}"
            sed 's/^/ >>> /' $ARTIFACTS_CLONE/../log
          else
            read -r g a v e flags < <(getFirstArtifactWithFlags)
            if [[ "$g" != "" && "$a" != "" ]]; then
              rm -f "$ARTIFACTS_CLONE/../log"
              newmain \
                "${{inputs.trigger_token}}"   \
                "${{inputs.local_dir}}"       \
                "$g"                          \
                "$a"                          \
                "${{inputs._branch}}"
              sed 's/^/ >>> /' $ARTIFACTS_CLONE/../log || :
            fi
          fi
        fi
